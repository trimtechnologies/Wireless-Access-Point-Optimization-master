import numpy as np

retas_paredes = [
    [944, 466, 944, 469],
    [1011, 469, 1011, 669],
    [1015, 469, 1015, 669],
    [406, 378, 569, 378],
    [406, 374, 566, 374],
    [383, 378, 383, 374],
    [406, 378, 406, 374],
    [920, 469, 920, 669],
    [917, 469, 917, 669],
    [1011, 482, 964, 482],
    [1011, 481, 964, 481],
    [944, 469, 1011, 469],
    [944, 466, 1016, 466],
    [826, 469, 893, 469],
    [826, 481, 872, 481],
    [826, 482, 872, 482],
    [962, 479, 962, 469],
    [963, 479, 963, 469],
    [922, 466, 915, 466],
    [922, 469, 920, 469],
    [893, 466, 893, 469],
    [922, 466, 922, 469],
    [915, 466, 915, 469],
    [917, 469, 915, 469],
    [915, 469, 917, 469],
    [915, 466, 922, 466],
    [920, 469, 922, 469],
    [874, 479, 874, 469],
    [875, 479, 875, 469],
    [1011, 669, 920, 669],
    [917, 669, 826, 670],
    [958, 546, 958, 556],
    [959, 576, 920, 576],
    [959, 577, 920, 577],
    [959, 607, 920, 607],
    [958, 608, 920, 608],
    [958, 597, 958, 607],
    [958, 632, 958, 633],
    [958, 632, 958, 632],
    [958, 632, 958, 632],
    [959, 633, 959, 632],
    [959, 633, 959, 632],
    [959, 632, 958, 632],
    [959, 609, 958, 609],
    [959, 608, 959, 609],
    [959, 608, 959, 609],
    [958, 609, 958, 609],
    [958, 609, 958, 609],
    [958, 609, 958, 608],
    [958, 609, 935, 609],
    [935, 609, 935, 610],
    [935, 610, 958, 610],
    [958, 610, 958, 609],
    [958, 608, 959, 608],
    [958, 633, 959, 633],
    [958, 633, 958, 669],
    [959, 633, 959, 669],
    [958, 579, 958, 578],
    [940, 579, 958, 579],
    [940, 578, 940, 579],
    [958, 578, 940, 578],
    [958, 578, 958, 577],
    [958, 578, 958, 578],
    [958, 578, 958, 578],
    [959, 577, 959, 578],
    [959, 577, 959, 578],
    [959, 578, 958, 578],
    [959, 596, 958, 596],
    [959, 597, 959, 596],
    [959, 597, 959, 596],
    [958, 596, 958, 596],
    [958, 596, 958, 596],
    [958, 596, 958, 597],
    [958, 597, 959, 597],
    [959, 597, 959, 608],
    [959, 576, 959, 577],
    [958, 557, 958, 556],
    [958, 557, 958, 557],
    [958, 557, 958, 557],
    [959, 556, 959, 557],
    [959, 556, 959, 557],
    [959, 557, 958, 557],
    [959, 574, 958, 574],
    [959, 576, 959, 574],
    [959, 576, 959, 574],
    [958, 574, 958, 575],
    [958, 575, 958, 575],
    [958, 575, 958, 576],
    [958, 575, 940, 575],
    [940, 575, 940, 574],
    [940, 574, 958, 574],
    [958, 574, 958, 575],
    [958, 556, 959, 556],
    [959, 546, 959, 556],
    [998, 652, 998, 651],
    [1011, 652, 998, 652],
    [1011, 651, 998, 651],
    [1011, 633, 998, 633],
    [1011, 632, 998, 632],
    [998, 632, 998, 633],
    [1011, 614, 998, 614],
    [1011, 613, 998, 613],
    [998, 613, 998, 614],
    [998, 596, 998, 594],
    [1011, 596, 998, 596],
    [1011, 594, 998, 594],
    [959, 514, 920, 514],
    [959, 512, 920, 512],
    [959, 512, 959, 514],
    [959, 546, 920, 546],
    [959, 544, 920, 544],
    [959, 514, 959, 524],
    [958, 524, 959, 524],
    [958, 543, 958, 543],
    [940, 543, 958, 543],
    [940, 543, 940, 543],
    [958, 543, 940, 543],
    [958, 543, 958, 544],
    [958, 543, 958, 543],
    [958, 543, 958, 543],
    [959, 544, 959, 543],
    [959, 544, 959, 543],
    [959, 543, 958, 543],
    [959, 526, 958, 526],
    [959, 524, 959, 526],
    [959, 524, 959, 526],
    [958, 526, 958, 525],
    [958, 525, 958, 525],
    [958, 525, 958, 524],
    [958, 514, 958, 524],
    [879, 514, 879, 524],
    [879, 525, 879, 524],
    [879, 525, 879, 525],
    [879, 526, 879, 525],
    [878, 524, 878, 526],
    [878, 524, 878, 526],
    [878, 526, 879, 526],
    [878, 543, 879, 543],
    [878, 544, 878, 543],
    [878, 544, 878, 543],
    [879, 543, 879, 543],
    [879, 543, 879, 543],
    [879, 543, 879, 544],
    [879, 543, 897, 543],
    [897, 543, 897, 543],
    [897, 543, 879, 543],
    [879, 543, 879, 543],
    [879, 524, 878, 524],
    [878, 514, 878, 524],
    [878, 544, 917, 544],
    [878, 546, 917, 546],
    [878, 512, 878, 514],
    [878, 512, 917, 512],
    [878, 514, 917, 514],
    [878, 546, 878, 556],
    [879, 556, 878, 556],
    [879, 574, 879, 575],
    [897, 574, 879, 574],
    [897, 575, 897, 574],
    [879, 575, 897, 575],
    [879, 575, 879, 576],
    [879, 575, 879, 575],
    [879, 574, 879, 575],
    [878, 576, 878, 574],
    [878, 576, 878, 574],
    [878, 574, 879, 574],
    [878, 557, 879, 557],
    [878, 556, 878, 557],
    [878, 556, 878, 557],
    [879, 557, 879, 557],
    [879, 557, 879, 557],
    [879, 557, 879, 556],
    [878, 576, 878, 577],
    [878, 597, 878, 608],
    [879, 597, 878, 597],
    [879, 596, 879, 597],
    [879, 596, 879, 596],
    [879, 596, 879, 596],
    [878, 597, 878, 596],
    [878, 597, 878, 596],
    [878, 596, 879, 596],
    [878, 578, 879, 578],
    [878, 577, 878, 578],
    [878, 577, 878, 578],
    [879, 578, 879, 578],
    [879, 578, 879, 578],
    [879, 578, 879, 577],
    [879, 578, 897, 578],
    [897, 578, 897, 579],
    [897, 579, 879, 579],
    [879, 579, 879, 578],
    [879, 633, 878, 633],
    [879, 608, 878, 608],
    [879, 610, 879, 609],
    [902, 610, 879, 610],
    [902, 609, 902, 610],
    [879, 609, 902, 609],
    [879, 609, 879, 608],
    [879, 609, 879, 609],
    [879, 609, 879, 609],
    [878, 608, 878, 609],
    [878, 608, 878, 609],
    [878, 609, 879, 609],
    [878, 632, 879, 632],
    [878, 633, 878, 632],
    [878, 633, 878, 632],
    [879, 632, 879, 632],
    [879, 632, 879, 632],
    [879, 632, 879, 633],
    [879, 597, 879, 607],
    [879, 608, 917, 608],
    [878, 607, 917, 607],
    [878, 577, 917, 577],
    [878, 576, 917, 576],
    [879, 546, 879, 556],
    [878, 633, 878, 669],
    [879, 633, 879, 669],
    [566, 171, 566, 0],
    [569, 378, 569, 3],
    [821, 378, 821, 3],
    [825, 171, 825, 0],
    [1038, 469, 1198, 469],
    [1038, 466, 1038, 469],
    [1016, 466, 1016, 469],
    [797, 466, 631, 466],
    [797, 469, 636, 469],
    [893, 466, 820, 466],
    [820, 466, 820, 469],
    [797, 466, 797, 469],
    [508, 469, 511, 469],
    [822, 669, 636, 669],
    [822, 469, 820, 469],
    [1015, 469, 1016, 469],
    [822, 469, 822, 669],
    [826, 469, 826, 669],
    [188, 469, 188, 669],
    [3, 466, 163, 466],
    [3, 378, 163, 378],
    [192, 469, 192, 669],
    [377, 469, 377, 669],
    [381, 469, 381, 669],
    [377, 669, 192, 669],
    [374, 466, 383, 466],
    [374, 469, 377, 469],
    [352, 466, 352, 469],
    [406, 466, 406, 469],
    [383, 466, 383, 469],
    [374, 466, 374, 469],
    [381, 469, 383, 469],
    [406, 466, 511, 466],
    [3, 469, 163, 469],
    [406, 469, 504, 469],
    [825, 0, 566, 0],
    [821, 3, 569, 3],
    [1198, 174, 1198, 374],
    [1202, 171, 1202, 673],
    [1013, 374, 1013, 174],
    [1009, 374, 1009, 174],
    [825, 171, 1202, 171],
    [1009, 175, 825, 174],
    [1016, 378, 1007, 378],
    [1016, 374, 1013, 374],
    [1038, 378, 1038, 374],
    [984, 378, 984, 374],
    [1007, 378, 1007, 374],
    [1016, 378, 1016, 374],
    [1009, 374, 1007, 374],
    [984, 378, 821, 378],
    [984, 374, 825, 374],
    [1198, 374, 1038, 374],
    [1198, 378, 1038, 378],
    [825, 374, 825, 174],
    [566, 374, 566, 174],
    [3, 374, 163, 374],
    [381, 374, 383, 374],
    [374, 378, 383, 378],
    [374, 378, 374, 374],
    [352, 378, 352, 374],
    [186, 374, 188, 374],
    [381, 374, 381, 174],
    [377, 374, 377, 174],
    [188, 174, 188, 374],
    [192, 174, 192, 374],
    [381, 669, 391, 669],
    [467, 632, 504, 632],
    [467, 632, 467, 649],
    [463, 628, 504, 628],
    [463, 628, 463, 649],
    [504, 632, 504, 669],
    [467, 669, 504, 669],
    [463, 667, 467, 667],
    [463, 649, 467, 649],
    [463, 667, 463, 669],
    [467, 667, 467, 669],
    [381, 669, 463, 669],
    [504, 469, 504, 628],
    [508, 469, 508, 628],
    [504, 632, 504, 669],
    [549, 603, 549, 606],
    [546, 628, 528, 628],
    [546, 599, 546, 606],
    [546, 632, 528, 632],
    [508, 632, 508, 669],
    [508, 669, 546, 669],
    [622, 673, 636, 673],
    [549, 669, 632, 669],
    [511, 628, 511, 632],
    [528, 628, 528, 632],
    [511, 628, 508, 628],
    [511, 632, 508, 632],
    [632, 603, 549, 603],
    [632, 599, 546, 599],
    [546, 632, 546, 669],
    [632, 469, 632, 599],
    [549, 606, 546, 606],
    [549, 626, 546, 626],
    [546, 626, 546, 628],
    [549, 626, 549, 669],
    [636, 469, 636, 669],
    [533, 466, 533, 469],
    [511, 466, 511, 469],
    [533, 466, 636, 466],
    [533, 469, 632, 469],
    [1198, 469, 1198, 669],
    [1038, 466, 1198, 466],
    [1015, 669, 1198, 669],
    [0, 673, 1202, 673],
    [632, 603, 632, 669],
    [566, 174, 381, 175],
    [3, 469, 3, 669],
    [0, 171, 0, 673],
    [3, 174, 3, 374],
    [192, 469, 352, 469],
    [188, 669, 3, 669],
    [566, 171, 0, 171],
    [377, 174, 366, 174],
    [186, 466, 186, 469],
    [163, 466, 163, 469],
    [163, 378, 163, 374],
    [186, 378, 186, 374],
    [186, 466, 352, 466],
    [186, 469, 188, 469],
    [186, 378, 352, 378],
    [3, 378, 3, 466],
    [1198, 378, 1198, 466],
    [1013, 174, 1198, 174],
    [188, 175, 3, 175],
    [377, 175, 192, 175],
    [192, 374, 352, 374],
    [374, 374, 377, 374],
]


def side(a, b, c):
    """ Returns a position of the point c relative to the line going through a and b
        Points a, b are expected to be different
    """
    d = (c[1] - a[1]) * (b[0] - a[0]) - (b[1] - a[1]) * (c[0] - a[0])
    return 1 if d > 0 else (-1 if d < 0 else 0)


def is_point_in_closed_segment(a, b, c):
    """ Returns True if c is inside closed segment, False otherwise.
        a, b, c are expected to be collinear
    """
    if a[0] < b[0]:
        return a[0] <= c[0] and c[0] <= b[0]
    if b[0] < a[0]:
        return b[0] <= c[0] and c[0] <= a[0]

    if a[1] < b[1]:
        return a[1] <= c[1] and c[1] <= b[1]
    if b[1] < a[1]:
        return b[1] <= c[1] and c[1] <= a[1]

    return a[0] == c[0] and a[1] == c[1]


#
def closed_segment_intersect(a, b, c, d):
    """ Verifies if closed segments a, b, c, d do intersect.
    """
    if a == b:
        return a == c or a == d
    if c == d:
        return c == a or c == b

    s1 = side(a, b, c)
    s2 = side(a, b, d)

    # All points are collinear
    if s1 == 0 and s2 == 0:
        return \
            is_point_in_closed_segment(a, b, c) or is_point_in_closed_segment(a, b, d) or \
            is_point_in_closed_segment(c, d, a) or is_point_in_closed_segment(c, d, b)

    # No touching and on the same side
    if s1 and s1 == s2:
        return False

    s1 = side(c, d, a)
    s2 = side(c, d, b)

    # No touching and on the same side
    if s1 and s1 == s2:
        return False

    return True

#
# def ccw(A, B, C):
#     return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])


def intersect(A, B, C, D):
    if ((D[1] - A[1]) * (C[0] - A[0]) > (C[1] - A[1]) * (D[0] - A[0])) \
            != ((D[1] - B[1]) * (C[0] - B[0]) > (C[1] - B[1]) * (D[0] - B[0])) \
            and ((C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])) \
                    != ((D[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (D[0] - A[0])):
        return 1
    return 0
        # return ccw(A, C, D) != ccw(B, C, D) and ccw(A, B, C) != ccw(A, B, D)

def absorcao_paredes(AccessPoint, Destino):
    # Seus pontos (origem, destino)
    # AccessPoint = [0,0]
    # Destino = [899, 579]

    intersecoes = 0

    a = filter(lambda x: intersect(AccessPoint, Destino, x[0:2], x[2:4]), retas_paredes)

    b = filter(lambda x: x != 0, a)

    intersecoes = len(list(b))

    # for reta_parede in retas_paredes:
    #     # Coordenadas da parede
    #     ParedePxyA = reta_parede[0:2]
    #     ParedePxyB = reta_parede[2:4]

        # if(closed_segment_intersect(AccessPoint, Destino, ParedePxyA, ParedePxyB)):
        #     intersecoes = intersecoes + 1

        # if intersect(AccessPoint, Destino, ParedePxyA, ParedePxyB):
        #     intersecoes = intersecoes + 1

            # if(intersectLines(AccessPoint, Destino, ParedePxyA, ParedePxyB)):
            #     intersecoes = intersecoes + 1

            # if(intersection(    AccessPoint, Destino, ParedePxyA, ParedePxyB)):
            #     intersecoes = intersecoes + 1

    dBm_absorvido_por_parede = 5
    miliWatts_absorvido_por_parede = pow(10, (dBm_absorvido_por_parede / 10))

    intersecoes_com_paredes = intersecoes / 2
    print("intersecoes_com_paredes = " + str(intersecoes_com_paredes))
    return intersecoes_com_paredes * miliWatts_absorvido_por_parede


absorcao_paredes((0, 0), (899, 579))
